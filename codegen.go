package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
)

const repo = "github.com/lu4p/embed-encrypt"

func generateCode(pkgName string, directives []directive) error {
	b := bytes.NewBuffer(nil)
	fmt.Fprintf(b, "// Code generated by https://%v; DO NOT EDIT.\n\n", repo)

	fmt.Fprintln(b, "package", pkgName)

	fmt.Fprintln(b, "import (")

	fmt.Fprintf(b, `"%v/encryptedfs"`+"\n", repo)

	if needsEmbed(directives) {
		fmt.Fprintln(b, `"embed"`)
	} else {
		fmt.Fprintln(b, `_ "embed"`)
	}

	b.WriteString(")\n")

	b.WriteString("//go:embed .fskey\n")
	b.WriteString("var key []byte\n")

	for _, d := range directives {
		initCode(b, d)
	}

	formatted, err := format.Source(b.Bytes())
	if err != nil {
		return err
	}

	return ioutil.WriteFile("encrypted_fs.go", formatted, 0666)
}

func needsEmbed(directives []directive) bool {
	for _, d := range directives {
		if d.typ == "embed.FS" {
			return true
		}
	}

	return false
}

func initCode(b *bytes.Buffer, d directive) {
	b.WriteString("func init(){\n")

	fmt.Fprintf(b, "//go:embed %v\n", filesString(d.files))

	fmt.Fprintf(b, "var enc %v\n", d.typ)

	switch d.typ {
	case "string":
		fmt.Fprintf(b, "%v = encryptedfs.DecString(enc, key)", d.identifier)
	case "[]byte":
		fmt.Fprintf(b, "%v = encryptedfs.DecByte(enc, key)", d.identifier)
	case "embed.FS":
		fmt.Fprintf(b, "%v = encryptedfs.InitFS(enc, key)", d.identifier)
	}

	b.WriteString("}\n")
}

func filesString(files []string) string {
	out := ""
	for _, file := range files {
		out += fmt.Sprintf("%q ", file+".enc")
	}

	return out
}
